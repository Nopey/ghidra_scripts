# Converts a VTable to an approximate C++ Header
#@author Magnus "Nopey" Larsen
#@category 
#@keybinding 
#@menupath Tools.Misc.VTable to C++ Header (Precise)
#@toolbar 

# Thanks to Fenteale for inspiring this with makeVtable.py
# https://github.com/Fenteale/GhidraVtableStructGenerator/blob/master/scripts/makeVtable.py

##
## ASKS and CONSTANTS
##

target_name = askString("VTable2CPP", "Target classname (ie: CBasePlayer)")
vtable_name = "__ZTV{}{}".format( len(target_name), target_name )

##
## IMPORTS, HELPER FNS
##
program = currentProgram # choose one program and stick to it
memory = program.getMemory()
symbol_table = currentProgram.getSymbolTable()
listing = currentProgram.getListing()
function_manager = currentProgram.getFunctionManager()

vtable_symbols = list(symbol_table.getGlobalSymbols(vtable_name))

# Crashes if no symbol matches, which is good.
vtable_symbol = vtable_symbols[0]
# if there's some to choose from, ask the user
if len(vtable_symbols) > 1:
    vtable_symbol = vtable_symbols[askInteger("VTable2CPP", "({}) matching symbols found.. Which one would you like?".format(len(vtable_symbols)))]
# we're done with that
del vtable_symbols

##
## MAIN
##

# top of class
print("// AUTOGENERATED BY preciseVTableToCPP.py")
print("")
print("class {}{{".format(target_name))
print("public:")

# skip the first 8 bytes, as they're just NULL (ptrdiff_t) followed by the typeinfo
code_units = listing.getCodeUnits(vtable_symbol.getAddress().add( 8 ), True)
while True:
    fs = next(code_units)

    valparts = fs.toString().split()
    if valparts[0] != "addr":
        # print("// halt: " + fs.toString())
        break

    function = function_manager.getFunctionContaining(vtable_symbol.getAddress().getNewAddress(int(valparts[1], 16)))
    if function == None:
        print("// WARN: Function not found at address {}".format(valparts[1]))
        continue

    # formalSignature = True
    # includeCallingConvention = False
    signature = function.getPrototypeString( True, False )
    print("    virtual {};".format( signature ))

print("};")
